{"entries":[{"timestamp":1744956403312,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":67,"start2":67,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"Cpe_pnu.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":218,"start2":218,"length1":67,"length2":44}]},{"type":"added","filename":"Cpe_pnu.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"ïƒƒ\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1744956628817,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"><block "],[1,"type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block "],[0,"type=\"de"]],"start1":77,"start2":77,"length1":16,"length2":63},{"diffs":[[0," x=\""],[-1,"10"],[1,"205"],[0,"\" y=\""],[-1,"1"],[0,"0\"><"]],"start1":153,"start2":153,"length1":16,"length2":16}]}]},{"timestamp":1744959685160,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":268,"start2":268,"length1":21,"length2":17}]}]},{"timestamp":1744959685288,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ver\""],[-1," id=\"*]~h1Cd}QNx:GYPf9k|X\""],[0," x=\""]],"start1":102,"start2":102,"length1":34,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":248,"start2":248,"length1":52,"length2":8},{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":268,"start2":268,"length1":17,"length2":21}]},{"type":"edited","filename":"Cpe_pnu.ts","patch":[{"diffs":[[1,"\n"],[0,"/**\n* Use th"]],"start1":0,"start2":0,"length1":12,"length2":13},{"diffs":[[0,"*/\n\n"],[-1,"/**\n * Motor directions\n */\nenum cpeMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum cpeTurn"],[1,"enum MyEnum"],[0," {\n "]],"start1":119,"start2":119,"length1":169,"length2":19},{"diffs":[[0," //% block=\""],[-1,"Left"],[1,"one"],[0,"\"\n    "],[-1,"Left"],[1,"One"],[0,",\n    //% bl"]],"start1":140,"start2":140,"length1":38,"length2":36},{"diffs":[[0,"ck=\""],[-1,"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum cpeSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right"],[1,"two\"\n    Two"],[0,"\n}\n\n/**\n"],[1," "],[0,"* Cu"]],"start1":177,"start2":177,"length1":140,"length2":29},{"diffs":[[0,"tom "],[-1,"motor control blocks for CPE_PNU\n*/\n//% block=\"CPE PNU\""],[1,"blocks\n */\n//%"],[0," wei"]],"start1":207,"start2":207,"length1":63,"length2":22},{"diffs":[[0,"ce c"],[-1,"pe_pnu"],[1,"ustom"],[0," {\n"],[-1,"\n"],[0,"    /**\n"],[1," "],[0,"    * "],[-1,"Drive both motors forward or backward with the same speed.\n    * @param Motor Direction to move, eg: cpeMotor.Forward\n    * @param speed Speed (0 to 100), eg: 50\n    */\n    //% block\n    //% speed.min=0 speed.max=100\n    export function Motor(Motor: cpeMotor, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Motor == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Motor == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n    * Drive both motors with individual speeds forward or backward.\n    * @param Motor Direction to move, eg: cpeMotor.Forward\n    * @param speed1 Speed for motor1 (0 to 100), eg: 50\n    * @param speed2 Speed for motor2 (0 to 100), eg: 50\n    */\n    //% block\n    //% speed1.min=0 speed1.max=100\n    //% speed2.min=0 speed2.max=100\n    export function Motor2(Motor: cpeMotor, speed1: number, speed2: number): void {\n        let motorspeed1 = pins.map(speed1, 0, 100, 0, 1023)\n        let motorspeed2 = pins.map(speed2, 0, 100, 0, 1023)\n\n        if (Motor == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed1)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed2)\n        }\n        else if (Motor == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed1)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed2)\n        }\n    }\n\n    /**\n    * Turn the robot by running one motor.\n    * @param Turn Direction to turn, eg: cpeTurn.Left\n    * @param speed Speed (0 to 100), eg: 50\n    */\n    //% block\n    //% speed.min=0 speed.max=100\n    export function Turn(Turn: cpeTurn, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Turn == cpeTurn.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, 0)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Turn == cpeTurn.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, 0)\n        }\n    }\n\n    /**\n    * Spin the robot in place (left or right).\n    * @param Spin Direction to spin, eg: cpeSpin.Left\n    * @param speed Speed (0 to 100)"],[1,"TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here"],[0,", eg: 5"],[-1,"0"],[0,"\n"],[1," "],[0,"    "]],"start1":267,"start2":267,"length1":3051,"length2":421},{"diffs":[[0,"    "],[-1,"//% speed.min=0 speed.max=100\n    export function Spin(Spin: cpeSpin, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Spin == cpeSpin.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Spin == cpeSpin.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n    * Stop both motors.\n    */\n    //% block\n    export function MotorStop(): void {\n        pins.digitalWritePin(DigitalPin.P13, 1)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        pins.analogWritePin(AnalogPin.P16, 0)"],[1,"export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);"],[0,"\n   "]],"start1":705,"start2":705,"length1":989,"length2":120}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1744956403311,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"cpe_pnu\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1744959685160,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","Cpe_pnu.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"ïƒƒ\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"cpe_pnu\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"Cpe_pnu.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1744959769912}